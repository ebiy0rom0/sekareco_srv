// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package registory

import (
	infra2 "sekareco_srv/domain/infra"
	"sekareco_srv/interface/database"
	"sekareco_srv/interface/handler"
	"sekareco_srv/interface/handler/auth"
	"sekareco_srv/interface/handler/health"
	"sekareco_srv/interface/handler/music"
	"sekareco_srv/interface/handler/person"
	"sekareco_srv/interface/handler/record"
	"sekareco_srv/interface/infra"
	"sekareco_srv/usecase/interactor"
	"sekareco_srv/usecase/validator"
)

// Injectors from app_container.go:

func InitializeDIContainer(sqlHandler infra.SqlHandler, txHandler infra.TxHandler, manager infra2.TokenManager) *handler.AppContainer {
	loginRepository := database.NewLoginRepository(sqlHandler)
	tx := database.NewTransaction(txHandler)
	authInteractor := interactor.NewAuthInteractor(manager, loginRepository, tx)
	authValidator := validator.NewAuthValidator()
	authHandler := auth.NewAuthHandler(authInteractor, authValidator)
	healthHandler := health.NewHealthHandler()
	musicRepository := database.NewMusicRepository(sqlHandler)
	musicInteractor := interactor.NewMusicInteractor(musicRepository, tx)
	musicHandler := music.NewMusicHandler(musicInteractor)
	personRepository := database.NewPersonRepository(sqlHandler)
	personInteractor := interactor.NewPersonInteractor(personRepository, loginRepository, tx)
	personValidator := validator.NewPersonValidator(loginRepository)
	personHandler := person.NewPersonHandler(personInteractor, personValidator)
	recordRepository := database.NewRecordRepository(sqlHandler)
	recordInteractor := interactor.NewRecordInteractor(recordRepository, tx)
	recordHandler := record.NewRecordHandler(recordInteractor)
	appContainer := handler.NewAppContainer(authHandler, healthHandler, musicHandler, personHandler, recordHandler)
	return appContainer
}
