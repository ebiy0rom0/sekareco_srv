// Package api GENERATED BY SWAG; DO NOT EDIT
// This file was generated by swaggo/swag
package api

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "MIT License",
            "url": "https://github.com/ebiy0rom0/sekareco_srv/blob/develop/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/musics": {
            "get": {
                "security": [
                    {
                        "Authentication": []
                    }
                ],
                "description": "get all music master records",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "music"
                ],
                "summary": "get list | get all music master records",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Music"
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/infra.HttpError"
                        }
                    }
                }
            }
        },
        "/persons/{person_id}": {
            "get": {
                "security": [
                    {
                        "Authentication": []
                    }
                ],
                "description": "get one person by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "person"
                ],
                "summary": "get one | get one person by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Want to get person ID",
                        "name": "person_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Person"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/infra.HttpError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Authentication": []
                    }
                ],
                "description": "update person register status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "person"
                ],
                "summary": "update status | update person register status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Update person ID",
                        "name": "person_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Hope New login ID",
                        "name": "login_id",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Hope new person_name",
                        "name": "person_name",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Hope new password",
                        "name": "password",
                        "in": "body",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HttpError"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/infra.HttpError"
                        }
                    }
                }
            }
        },
        "/records/{person_id}": {
            "get": {
                "security": [
                    {
                        "Authentication": []
                    }
                ],
                "description": "get all records data by person",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "record"
                ],
                "summary": "get list | get all records data by person",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Want to get personID",
                        "name": "person_id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Record"
                            }
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/infra.HttpError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Authentication": []
                    }
                ],
                "description": "create new record",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "record"
                ],
                "summary": "new record | create new record",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Want to add personID",
                        "name": "person_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "store target musicID",
                        "name": "music_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "description": "easy's clear status",
                        "name": "record_easy",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "description": "normal's clear status",
                        "name": "record_normal",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "description": "hard's clear status",
                        "name": "record_hard",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "description": "expert's clear status",
                        "name": "record_expert",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "description": "master's clear status",
                        "name": "record_master",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Record"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HttpError"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/infra.HttpError"
                        }
                    }
                }
            }
        },
        "/records/{person_id}/{music_id}": {
            "put": {
                "security": [
                    {
                        "Authentication": []
                    }
                ],
                "description": "update record clear status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "record"
                ],
                "summary": "update status | update record clear status",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Want to update personID",
                        "name": "person_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Want to update musicID",
                        "name": "music_id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "description": "easy's clear status",
                        "name": "record_easy",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "description": "normal's clear status",
                        "name": "record_normal",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "description": "hard's clear status",
                        "name": "record_hard",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "description": "expert's clear status",
                        "name": "record_expert",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "description": "master's clear status",
                        "name": "record_master",
                        "in": "body",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Record"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HttpError"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/infra.HttpError"
                        }
                    }
                }
            }
        },
        "/signin": {
            "post": {
                "description": "generate and stored token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "add token | generate and stored token",
                "parameters": [
                    {
                        "description": "LoginID",
                        "name": "login_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "password",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "generate new token",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HttpError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/infra.HttpError"
                        }
                    }
                }
            }
        },
        "/signout": {
            "delete": {
                "security": [
                    {
                        "Authentication": []
                    }
                ],
                "description": "delete a stored token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "delete token | delete a stored token",
                "parameters": [
                    {
                        "description": "Want to delete token personID",
                        "name": "person_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HttpError"
                        }
                    }
                }
            }
        },
        "/signup": {
            "post": {
                "description": "create new person",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "account"
                ],
                "summary": "new account | create new person",
                "parameters": [
                    {
                        "description": "Hope ID",
                        "name": "login_id",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Hope display name",
                        "name": "person_name",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Hope password",
                        "name": "password",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Person"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/infra.HttpError"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/infra.HttpError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "infra.HttpError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "set a server error message"
                }
            }
        },
        "model.Music": {
            "type": "object",
            "properties": {
                "artist_id": {
                    "type": "integer"
                },
                "jacket_url": {
                    "type": "string"
                },
                "level_easy": {
                    "type": "integer"
                },
                "level_expert": {
                    "type": "integer"
                },
                "level_hard": {
                    "type": "integer"
                },
                "level_master": {
                    "type": "integer"
                },
                "level_normal": {
                    "type": "integer"
                },
                "music_id": {
                    "type": "integer"
                },
                "music_name": {
                    "type": "string"
                }
            }
        },
        "model.Person": {
            "type": "object",
            "properties": {
                "friend_code": {
                    "type": "integer"
                },
                "person_id": {
                    "type": "integer"
                },
                "person_name": {
                    "type": "string"
                }
            }
        },
        "model.Record": {
            "type": "object",
            "properties": {
                "music_id": {
                    "type": "integer"
                },
                "person_id": {
                    "type": "integer"
                },
                "record_easy": {
                    "type": "integer"
                },
                "record_expert": {
                    "type": "integer"
                },
                "record_hard": {
                    "type": "integer"
                },
                "record_id": {
                    "type": "integer"
                },
                "record_master": {
                    "type": "integer"
                },
                "record_normal": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer Authentication": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0-beta",
	Host:             "localhost:8000",
	BasePath:         "/api/v1",
	Schemes:          []string{"http", "https"},
	Title:            "sekareco_srv",
	Description:      "sekareco REST API server.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
